{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-this-all-about","title":"What is this all about?","text":"<p>Welcome to my competitive programming solutions hub! This site is a treasure trove of ingenious algorithms, elegant coding techniques, and innovative problem-solving approaches. Here, you'll find a comprehensive collection of my solutions to a wide range of competitive programming challenges.</p>"},{"location":"#what-is-in-it-for-you","title":"What is in it for you?","text":"<p>Whether you're a novice looking to sharpen your skills or a seasoned pro seeking inspiration, this site offers a wealth of knowledge and practical insights. Join me on this exhilarating journey as we delve into the realms of algorithms, data structures, and optimization strategies. Let's embark on this thrilling adventure together and conquer the world of competitive programming, one algorithm at a time.</p>"},{"location":"404/","title":"404 - Not found","text":""},{"location":"codechef/","title":"CodeChef","text":""},{"location":"codechef/#problems","title":"Problems","text":"<ul> <li>list of all problems is availiable on</li> <li>but you have to scrape it to download the list</li> <li>each problem has a unique code that you can put in the url</li> <li>https://www.codechef.com/practice?end_rating=5000&amp;group=all&amp;hints=0&amp;itm_campaign=problems_head&amp;itm_medium=navmenu&amp;limit=4000&amp;page=0&amp;search=&amp;sort_by=difficulty_rating&amp;sort_order=asc&amp;start_rating=0&amp;tags=&amp;topic=&amp;video_editorial=0&amp;wa_enabled=0</li> </ul>"},{"location":"codechef/#contests","title":"Contests","text":"<ul> <li>all contest problems gets convertd to regular problems</li> <li>their are many types of contests<ul> <li>long challenges - 3 days</li> <li>small contests - 3 hours</li> <li>and starters</li> </ul> </li> </ul>"},{"location":"codechef/#ratings","title":"Ratings","text":"<ul> <li>have star system</li> </ul>"},{"location":"codechef/#tips","title":"Tips","text":"<ul> <li>aks questions in community forums, it has a big community so you are more likely to get a answer.</li> </ul>"},{"location":"codeforces/","title":"Codeforces","text":""},{"location":"codeforces/#problems","title":"Problems","text":"<ul> <li>to get list of all problems there is a public api</li> <li>https://codeforces.com/api/problemset.problems</li> <li>you can download this file, it contains problems and their related tags</li> </ul>"},{"location":"codeforces/#contests","title":"Contests","text":"<ul> <li>contests for div1 and div2 happen, div1 is for experienced uses and div1 is for   uses with less experience.</li> <li>you can also start virtual contest to practice</li> <li>editorial of every coding contest are released</li> <li>also you can hack the problems in contests<ul> <li>after contest for certain time period, you can challenge other people solution</li> <li>by providing test cases on which there solution will fail</li> <li>a successful hack will result in increase in your rating also</li> </ul> </li> </ul>"},{"location":"codeforces/#ratings","title":"Ratings","text":"<ul> <li>newbie - 0-1200</li> <li>pupil - 1200-1400</li> <li>specialist - 1400-1600</li> <li>expert - 1600-1900</li> <li>candidate master - 1900-2100</li> <li>master - 2100-2300</li> <li>international master - 2300-2400</li> <li>grandmaster - 2400-2600</li> <li>international grandmaster - 2600-3000</li> <li> <p>legendary grandmaster - 3000-inf</p> </li> <li> <p>rating distributions - https://codeforces.com/blog/entry/71260</p> </li> </ul>"},{"location":"codeforces/#tips","title":"Tips","text":"<ul> <li>if you use c++ don't use macros if you are starting out</li> <li>try to make you own test cases</li> <li>as you advance, you can also do stress testing before submitting solutions</li> <li>don't look at rating, it will get into your head</li> </ul>"},{"location":"codeforces/555/","title":"555","text":"","tags":["dp"]},{"location":"codeforces/555/#question-1","title":"Question 1","text":"","tags":["dp"]},{"location":"codeforces/script/","title":"codeforces questions list","text":"<ul> <li>use api - https://codeforces.com/api/problemset.problems</li> </ul>"},{"location":"codeforces/script/contests/","title":"Contests","text":"<pp>"},{"location":"codeforces/script/tag_count/","title":"Tag count","text":"<ul> <li>implementation 2267</li> <li>math 2148</li> <li>greedy 2109</li> <li>dp 1647</li> <li>data structures 1337</li> <li>constructive algorithms 1287</li> <li>brute force 1260</li> <li>graphs 877</li> <li>sortings 814</li> <li>binary search 793</li> <li>dfs and similar 735</li> <li>trees 623</li> <li>strings 578</li> <li>number theory 553</li> <li>combinatorics 485</li> <li>bitmasks 407</li> <li>two pointers 393</li> <li>*special 382</li> <li>geometry 332</li> <li>dsu 272</li> <li>shortest paths 217</li> <li>divide and conquer 214</li> <li>probabilities 183</li> <li>hashing 163</li> <li>interactive 162</li> <li>games 159</li> <li>flows 120</li> <li>matrices 104</li> <li>string suffix structures 78</li> <li>fft 77</li> <li>graph matchings 71</li> <li>ternary search 46</li> <li>meet-in-the-middle 41</li> <li>expression parsing 34</li> <li>2-sat 26</li> <li>chinese remainder theorem 14</li> <li>schedules 6</li> </ul>"},{"location":"codeforces/script/tags/","title":"Tags","text":"<ul> <li>implementation<ul> <li>implementation based question we are given some problem and we have  to code it, generally some simple algorithm is used but it is not easy  and apparent how will you code that</li> </ul> </li> <li>math</li> <li>greedy</li> <li>dp<ul> <li>dynamic programming</li> </ul> </li> <li>data structures</li> <li>constructive algorithms</li> <li>brute force</li> <li>graphs</li> <li>sortings</li> <li>binary search</li> <li>dfs and similar<ul> <li>graph</li> </ul> </li> <li>trees</li> <li>strings</li> <li>number theory</li> <li>combinatorics</li> <li>bitmasks</li> <li>two pointers</li> <li>*special</li> <li>geometry</li> <li>dsu<ul> <li>disjoint union</li> </ul> </li> <li>shortest paths</li> <li>divide and conquer</li> <li>probabilities</li> <li>hashing</li> <li>interactive</li> <li>games</li> <li>flows</li> <li>matrices</li> <li>string suffix structures</li> <li>fft</li> <li>graph matchings</li> <li>ternary search</li> <li>meet-in-the-middle</li> <li>expression parsing</li> <li>2-sat<ul> <li>2-satisfiability</li> </ul> </li> <li>chinese remainder theorem</li> <li>schedules</li> </ul>"},{"location":"leetcode/","title":"Leetcode","text":""},{"location":"leetcode/#problems","title":"Problems","text":"<ul> <li>each problem have a unique problem number</li> <li>but the url of each problem is created from its title</li> </ul> <p>to get list of all problems you have to scrape their problems website</p>"},{"location":"leetcode/#contests","title":"Contests","text":"<ul> <li>there are weekly and biweekly problems</li> <li>these problems gets converted into regular problems when the contest ends</li> </ul>"},{"location":"leetcode/#ratings","title":"Ratings","text":"<ul> <li>you have to take part in contest to get some ratings</li> <li>much easier to gain rating that in other platforms</li> </ul>"},{"location":"leetcode/#tips","title":"Tips","text":"<ul> <li>You can practice SQL queries in this platform also</li> <li>Also there is interview section which you can use to practice in a timed manner</li> </ul>"},{"location":"leetcode/1/","title":"Two Sum","text":"<p>Given target \\(t\\), and a list \\(l\\), find pair of items whose sum is equal to \\(t\\).</p>","tags":["array","hash-table"]},{"location":"leetcode/1/#brute-force","title":"Brute Force","text":"<pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        for i in range(0, len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n\n        return None\n</code></pre> <ul> <li>\\(n\\) - length of list</li> <li>Time Complexity - \\(O(n^2)\\)</li> <li>Space Complexity - \\(O(1)\\)</li> </ul>","tags":["array","hash-table"]},{"location":"leetcode/1/#hashmap","title":"Hashmap","text":"<p>Here given no \\(x\\), you have to find \\(t - n\\).</p> <pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        items = {}\n        for i in range(0, len(nums)):\n            no0 = nums[i]\n            no1 = target - no0\n            if no1 in items:\n                return [i, items[no1]]\n\n            items[no0] = i\n\n        return None\n</code></pre> <ul> <li>\\(n\\) - length of list</li> <li>Time Complexity - \\(O(n)\\)</li> <li>Space Complexity - \\(O(n)\\)</li> </ul>","tags":["array","hash-table"]},{"location":"leetcode/1/#sorting-and-then-two-pointer","title":"Sorting and then two pointer","text":"<p>If we are given sorted array we can solve this using two pointer approach. Since we have to return index and not the number, we have to create another list with no. and it's index.</p> <pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        items = [[nums[i], i] for i in range(0, len(nums))]\n        items.sort(key=lambda x: x[0])\n\n        left, right = 0, len(items) - 1\n        while left &lt; right:\n            sum = items[left][0] + items[right][0]\n            if sum == target:\n                return [items[left][1], items[right][1]]\n\n            if sum &lt; target:\n                left += 1\n            else:\n                right -= 1\n\n        return None\n</code></pre> <ul> <li>\\(n\\) - length of list</li> <li>Time Complexity - \\(O(n \\log(n))\\)</li> <li>Space Complexity - \\(O(n)\\)</li> </ul>","tags":["array","hash-table"]},{"location":"leetcode/1048/","title":"Longest String Chain","text":"","tags":["Array","Hash Table","Two Pointers","String","Dynamic Programming"]},{"location":"leetcode/1048/#dynamic-programming","title":"Dynamic Programming","text":"<p>This problem is like this:</p> <p>Given a list of items \\(L\\), and a relation \\(R\\) on items.</p> <p>You have to find the length of longest list \\(l\\) which is composed of elements of \\(L\\), such that, \\((l_0, l_1) \\in R, (l_1, l_2) \\in R, \\cdots, (l_{n-1}, l_n) \\in R\\)</p> <p>Here the relation \\(R\\) is predecessor, which is defined as, \\((x, y) \\in R\\), iff remove a character from \\(y\\) and it becomes equivalent to \\(x\\).</p> <p>Relation \\(R\\) has following properties:</p> <ul> <li>if \\((x, y) \\in R\\), then \\(\\operatorname{len}(x) + 1 = \\operatorname{len}(y)\\)<ul> <li>so, if we have \\(x\\) we only have to check for \\(y\\) with this property</li> <li>for this we can do sort the list based on words length</li> <li>or we can create a dictionary based on length of words</li> </ul> </li> </ul>","tags":["Array","Hash Table","Two Pointers","String","Dynamic Programming"]},{"location":"leetcode/1048/#using-sorting","title":"Using sorting","text":"<ul> <li>Each subproblem in this problem uniquely identified by the index of word, so we only need a single dimensional table to sore result of a state.</li> </ul> <pre><code>class Solution:\n\n    def __init__(self):\n        self.state = {}\n\n    def getMaxChainAtI(self, i, words):\n        if i + 1 == len(words):\n            return 1\n        if i in self.state:\n            return self.state[i]\n        ans = 0\n        for j in range(i+1, len(words)):\n            if len(words[i]) + 1 &lt; len(words[j]):\n                break\n            if self.isPredecessor(words[i], words[j]):\n                ans = max(ans, self.getMaxChainAtI(j, words))\n\n        self.state[i] = ans + 1\n        return ans + 1\n\n    def isPredecessor(self, s1, s2):\n        if len(s1) + 1 != len(s2):\n            return False\n        count, i, j = 0, 0, 0\n        while i &lt; len(s1) and j &lt; len(s2):\n            if s1[i] != s2[j]:\n                count += 1\n                j += 1\n            else:\n                j += 1\n                i += 1\n        return False if count &gt;= 2 else True\n\n    def longestStrChain(self, words: List[str]) -&gt; int:\n\"\"\"\n        return length of longest word chain\n        \"\"\"\n        ans = 0\n        words = sorted(words, key=lambda word: len(word))\n        for i in range(0, len(words)):\n            ans = max(ans, self.getMaxChainAtI(i, words))\n        return ans\n</code></pre>","tags":["Array","Hash Table","Two Pointers","String","Dynamic Programming"]},{"location":"leetcode/1048/#using-a-dictionary","title":"Using a dictionary","text":"<ul> <li>Here a subproblem state is defined by, the length of word and it's index in the list of length of that words. So we need a 2d table.</li> </ul> <pre><code>class Solution:\n\n    def __init__(self):\n        self.state = {}\n        self.items = {}\n\n    def getMaxChainAtI(self, i, j):\n        if i + 1 not in self.items:\n            return 1\n\n        if i in self.state:\n            if j in self.state[i]:\n                return self.state[i][j]\n        else:\n            self.state[i] = {}\n\n        ans = 0\n        for k in range(0, len(self.items[i+1])):\n            if self.isPredecessor(self.items[i][j], self.items[i+1][k]):\n                ans = max(ans, self.getMaxChainAtI(i+1, k))\n\n        self.state[i][j] = ans + 1\n        return ans + 1\n\n    def isPredecessor(self, s1, s2):\n        if len(s1) + 1 != len(s2):\n            return False\n        count, i, j = 0, 0, 0\n        while i &lt; len(s1) and j &lt; len(s2):\n            if s1[i] != s2[j]:\n                count += 1\n                j += 1\n            else:\n                j += 1\n                i += 1\n        return False if count &gt;= 2 else True\n\n    def longestStrChain(self, words: List[str]) -&gt; int:\n\"\"\"\n        return length of longest word chain\n        \"\"\"\n        ans = 0\n\n        for word in words:\n            key = len(word)\n            if key in self.items:\n                self.items[key].append(word)\n            else:\n                self.items[key] = [word]\n\n        for i in self.items.keys():\n            t = len(self.items[i])\n            for j in range(0, t):\n                ans = max(ans , self.getMaxChainAtI(i, j))\n                print()\n\n        return ans\n</code></pre>","tags":["Array","Hash Table","Two Pointers","String","Dynamic Programming"]},{"location":"leetcode/122/","title":"Best Time to Buy and Sell Stock II","text":"<pre><code>class Solution {\npublic:\nint maxProfit(vector&lt;int&gt;&amp; a) {\nint total = 0;\nint n = a.size();\nif(n==1) return 0;\nint buy=-1, sell=0;\nfor(int i=0;i&lt;n;i++){\nif(buy != -1){\nif(a[i-1] &gt; a[i]){\ntotal = total + (a[i-1] - buy);\nbuy = a[i];\n}\n} else {\nbuy = a[i];\n}\n}\nif(buy != -1) total += a[n-1] - buy;\nreturn total;\n}\n};\n</code></pre>","tags":["array","dp","greedy"]},{"location":"leetcode/1751/","title":"Maximum Number of Events That Can Be Attended II","text":""},{"location":"leetcode/1751/#intuition","title":"Intuition","text":"<p>This problem could be solved with a greedy algorithm but</p> <ul> <li>what should we do greedily<ul> <li>greedily select intervals with maximum value</li> <li>greedily try to increase number of intervals</li> </ul> </li> </ul> <p>This concludes that this is not a greedy problem, if it were there would be only one greedy way.</p> <p>Now it is clear we have to check all the cases, and this can be solved recursively.</p> <pre><code>solve(index, items_remaining){\nif(items_remaining == 0 || index &gt; items_size) return 0;\nreturn maximum(\nsolve(index + 1, items_remaining), // don't take this item\nsolve(index + 1, items_remaining - 1) + value_of_current_item // take current item\n)\n}\n</code></pre> <p>But there is a problem, how can we know that the item we are currently at, can be taken without knowing what items we already took. What if this interval is overlapping with previous interval we took.</p> <p>This can be solved in two ways:</p> <p>We maintain a data structure which helps us to tell if we can take current element. This data structure can be a map. This additional data structure will cause our recursive functions to have many more states so applying dynamic programming on this will not work.</p> <p>So what if we change our items array in such a way that we don't have to see what we took earlier. This can be achieved by sorting our array by start time, and when we pick a element the next element after that would have it's start value greater than current end value.</p> <p>We can linearly search for the next element or even better we can apply binary search.</p> <p>Now all we have to do is, apply dynamic programming by utilizing state of our recursive function.</p>"},{"location":"leetcode/229/","title":"Majority Element II","text":"<p>So this question can be easily solved by maintaining count of elements, using a hashmap.</p> <p>Time complexity of this approach would be \\(O(n)\\) but space complexity is also \\(O(n)\\).</p> <p>Now first thing you can notice is, there can be only two elements, whose count can be greater than, \\(\\lfloor n/2 \\rfloor\\).</p> <p>If you solved majority element one, we know that if we add and subtract for presence of another element, we will at last get the majority element.</p> <p>Here we can apply a similar approach, but we have to take two elements instead, and here is the final trick,</p> <ul> <li>both elements can be majority ii elements</li> <li>one of element is majority ii element</li> <li>none of them is majority ii element</li> </ul> <p>How to solve this??</p> <p>Just iterate again on array and count for the their occurrences to check if they are valid answer.</p>"},{"location":"leetcode/229/#how-it-really-works","title":"How it really works?","text":"<p>This is related to a algorithm called - Majority Voting algorithm. https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm</p> <p>Here is basic idea:</p> <p>Given \\(n\\) numbers and the \\(k\\) counters, only less than \\(n/(k+1)\\) times pair-out can happen. Pair-out means one element remove count of other element from majority.</p> <p>That is to say:</p> <ul> <li>given \\(n\\) numbers and \\(1\\) counter, at most \\(n/2\\) times pair-out can happen,   which will lead to the survival of the only element that appeared more than \\(n/2\\) times.</li> <li>given \\(n\\) numbers and \\(2\\) counters, at most \\(n/3\\) times pair-out can happen,   which will lead to the survival of elements that appeared more than \\(n/3\\) times.</li> <li>given \\(n\\) numbers and \\(k\\) counters, at most \\((n/k+1)\\) times of pair-out can happen,   which will lead to the survival of elements that appeared more than \\(n/(k+1)\\) times.</li> </ul> <p>In algorithm you,</p> <ul> <li>decrease counter of all elements if no one matches</li> <li>if some counter is 0, you give a new element to it already don't have counter</li> </ul>"},{"location":"leetcode/23/","title":"Merge k Sorted Lists","text":"<ul> <li>https://www.youtube.com/watch?v=kpCesr9VXDA</li> </ul>"},{"location":"leetcode/23/#simple-iteration","title":"Simple Iteration","text":"<pre><code>def join_two_list(l1, l2):\n\"\"\"\n    method to joint two lists\n    wishful thinking\n    \"\"\"\n    return joined_list\n\ndef mergeKLists(lists):\n\"\"\"\n    methods to merge k lists\n    \"\"\"\n\n    joined_lists = None\n\n    for list in lists:\n        joined_lists = join_two_list(list, joined_lists)\n\n    return joined_lists\n</code></pre>"},{"location":"leetcode/324/","title":"Wiggle Sort","text":"<ul> <li>so to sort this we have to use divide and conquer</li> <li>first we get the middle element in the sorted array<ul> <li>this is done using the quickselect algorithm</li> </ul> </li> <li></li> </ul>"},{"location":"leetcode/389/","title":"Find the Difference","text":""},{"location":"leetcode/389/#using-hashmap","title":"Using Hashmap","text":"<p>There are different ways to utilize hashmap in this problem. Simple one is to create two hashmap and then check the item which has greater count.</p> <pre><code>class Solution:\n    def findTheDifference(self, s: str, t: str) -&gt; str:\n        s_dic = Counter(s)\n        t_dic = Counter(t)\n        for char in t_dic:\n            if not s_dic[char] == t_dic[char]:\n                return char\n</code></pre>"},{"location":"leetcode/389/#using-xor-property","title":"Using XOR property","text":"<p>XOR of two similar items have a cancellation effect. \\(a \\text{ XOR } b \\text{ XOR } b = a\\)</p> <pre><code>class Solution:\n    def findTheDifference(self, s: str, t: str) -&gt; str:\n        c=0\n        for ch in s:\n            c^=ord(ch)\n        for ch in t:\n            c^=ord(ch)\n        return chr(c) \n</code></pre>"},{"location":"leetcode/799/","title":"Champagne Tower","text":"<p>This is simple problem. You do as is described in the problem. First you pour all amount in one glass. Now you put 1 in this glass and half in one glass, and half in other. This problem is similar to pascal triangle problem in sense that you have to use nearly same iterative process. But in this case it is much easier if you generate new row while iterating previous row, rather than generating new row items while iterating them.</p> <p>Here is a naive solution:</p> <pre><code>class Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -&gt; float:\n        glass = [[poured]]\n        for row in range(0, query_row+1):\n            prevrow = glass[row]\n            currow = [0] * (len(prevrow) + 1)\n            for i in range(0, len(prevrow)):\n                if prevrow[i] &gt; 1:\n                    prevrow[i] -= 1\n                    currow[i] += prevrow[i] / 2\n                    currow[i+1] += prevrow[i] / 2\n                    prevrow[i] = 1\n            glass.append(currow)\n\n            if i == query_row:\n                return prevrow[query_glass]\n\n        return 0\n</code></pre> <p>Here is space optimized approach:</p> <pre><code>class Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -&gt; float:\n        prevrow = [poured]\n        for row in range(0, query_row+1):\n            currow = [0] * (len(prevrow) + 1)\n            for i in range(0, len(prevrow)):\n                if prevrow[i] &gt; 1:\n                    prevrow[i] -= 1\n                    currow[i] += prevrow[i] / 2\n                    currow[i+1] += prevrow[i] / 2\n                    prevrow[i] = 1\n            if i == query_row:\n                return prevrow[query_glass]\n            prevrow = currow\n\n        return 0\n</code></pre>","tags":["arrays"]},{"location":"tips/","title":"Tips for Competitive Programming","text":"<ul> <li>How to debug?</li> </ul>"},{"location":"tips/debugging/","title":"Debugging","text":"<ul> <li>Use this template to debug,</li> </ul> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Debug {\npublic:\nvoid print(const int &amp;x) { cout &lt;&lt; x; }\nvoid print(const long &amp;x) { cout &lt;&lt; x; }\nvoid print(const bool &amp;x) { cout &lt;&lt; (x ? \"true\" : \"false\"); }\nvoid print(const long long &amp;x) { cout &lt;&lt; x; }\nvoid print(const unsigned &amp;x) { cout &lt;&lt; x; }\nvoid print(const unsigned long &amp;x) { cout &lt;&lt; x; }\nvoid print(const unsigned long long &amp;x) { cout &lt;&lt; x; }\nvoid print(const float &amp;x) { cout &lt;&lt; x; }\nvoid print(const double &amp;x) { cout &lt;&lt; x; }\nvoid print(const long double &amp;x) { cout &lt;&lt; x; }\nvoid print(const char &amp;x) { cout &lt;&lt; (char)44 &lt;&lt; x &lt;&lt; (char)44; }\nvoid print(const char *x) { cout &lt;&lt; (char)34 &lt;&lt; x &lt;&lt; (char)34; }\nvoid print(const string &amp;x) { cout &lt;&lt; (char)34 &lt;&lt; x &lt;&lt; (char)34; }\ntemplate &lt;typename T, typename V&gt; void print(const pair&lt;T, V&gt; &amp;x) {\ncout &lt;&lt; '{';\nprint(x.first);\ncout &lt;&lt; ',';\nprint(x.second);\ncout &lt;&lt; \"}\";\n}\ntemplate &lt;typename T, typename V, typename U&gt;\nvoid print(const tuple&lt;T, V, U&gt; &amp;x) {\ncout &lt;&lt; '{';\nprint(get&lt;0&gt;(x));\ncout &lt;&lt; ',';\nprint(get&lt;1&gt;(x));\ncout &lt;&lt; ',';\nprint(get&lt;2&gt;(x));\ncout &lt;&lt; \"}\";\n}\ntemplate &lt;typename T&gt; void print(const vector&lt;T&gt; &amp;x) {\ncout &lt;&lt; \"{\";\nfor (int i = 0; i &lt; x.size(); i++) {\nprint(x[i]);\ncout &lt;&lt; (x.size() - i - 1 ? \",\" : \"\");\n};\ncout &lt;&lt; \"}\";\n}\ntemplate &lt;typename T&gt; void print(const T &amp;x) {\nint f = 0;\ncout &lt;&lt; '{';\nfor (auto &amp;i : x)\ncout &lt;&lt; (f++ ? \",\" : \"\"), print(i);\ncout &lt;&lt; \"}\";\n}\nvoid dprint() { cout &lt;&lt; \"]\\n\"; }\ntemplate &lt;typename T, typename... V&gt; void dprint(T t, V... v) {\nprint(t);\nif (sizeof...(v))\ncout &lt;&lt; \", \";\ndprint(v...);\n}\n};\n\nDebug d;\n#ifndef ONLINE_JUDGE\n#define debug(x...)                                                            \\\n  cout &lt;&lt; \"[\" &lt;&lt; #x &lt;&lt; \"] = [\";                                                \\\n  d.dprint(x)\n#else\n#define debug(x...)\n#endif\n\nint main() {\nint a = 10;\nint b = 100;\nbool c = false;\nlong long D = 10000;\nunsigned e = 10000;\nunsigned long f = 1000;\nunsigned long long g = 100;\nfloat h = 123.323;\ndouble i = 312.32;\nlong double j = 213.312;\nchar k = 'k';\nstring s = \"dasdas\";\ndebug(a);\ndebug(b);\ndebug(c);\ndebug(D);\ndebug(e);\ndebug(f);\ndebug(g);\ndebug(h);\nreturn 0;\n}\n</code></pre>"},{"location":"tips/famous-problems/","title":"Famous Problems","text":"<ul> <li>https://en.wikipedia.org/wiki/Longest_increasing_subsequence</li> </ul>"}]}